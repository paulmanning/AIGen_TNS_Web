name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y bc
        npm ci
        npm install -g vitest
      
    - name: Create env file
      run: |
        touch .env.local
        echo "NEXT_PUBLIC_MAPBOX_TOKEN=dummy_token_for_tests" >> .env.local
      
    - name: Run tests with coverage
      id: test-coverage
      run: |
        # Run tests and save output
        echo "Running tests with coverage..."
        npm run test -- --coverage --environment jsdom --reporter verbose | tee test-output.txt
        
        # Extract coverage metrics
        STATEMENTS=$(grep "All files" test-output.txt | awk '{print $2}' | tr -d '%' || echo "0")
        BRANCHES=$(grep "All files" test-output.txt | awk '{print $3}' | tr -d '%' || echo "0")
        FUNCTIONS=$(grep "All files" test-output.txt | awk '{print $4}' | tr -d '%' || echo "0")
        LINES=$(grep "All files" test-output.txt | awk '{print $5}' | tr -d '%' || echo "0")
        
        # Save metrics as step outputs
        echo "statements=$STATEMENTS" >> $GITHUB_OUTPUT
        echo "branches=$BRANCHES" >> $GITHUB_OUTPUT
        echo "functions=$FUNCTIONS" >> $GITHUB_OUTPUT
        echo "lines=$LINES" >> $GITHUB_OUTPUT
        
        # Check for test failures
        if grep -q "FAIL" test-output.txt; then
          echo "::error::Tests failed. See output above for details."
          exit 1
        fi
      env:
        NODE_ENV: test
        NEXT_PUBLIC_MAPBOX_TOKEN: dummy_token_for_tests
        CI: true
        DEBUG: 'true'
      
    - name: Upload coverage reports to Codecov
      if: always()
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Check coverage thresholds
      if: success()
      run: |
        echo "Coverage metrics from test run:"
        echo "Statements: ${{ steps.test-coverage.outputs.statements }}%"
        echo "Branches: ${{ steps.test-coverage.outputs.branches }}%"
        echo "Functions: ${{ steps.test-coverage.outputs.functions }}%"
        echo "Lines: ${{ steps.test-coverage.outputs.lines }}%"
        
        THRESHOLD=80
        
        # Use bc for floating point comparison
        if (( $(echo "${{ steps.test-coverage.outputs.statements }} < $THRESHOLD" | bc -l) )); then
          echo "::error::Statement coverage (${{ steps.test-coverage.outputs.statements }}%) is below threshold ($THRESHOLD%)"
          exit 1
        fi
        
        if (( $(echo "${{ steps.test-coverage.outputs.branches }} < $THRESHOLD" | bc -l) )); then
          echo "::error::Branch coverage (${{ steps.test-coverage.outputs.branches }}%) is below threshold ($THRESHOLD%)"
          exit 1
        fi
        
        if (( $(echo "${{ steps.test-coverage.outputs.functions }} < $THRESHOLD" | bc -l) )); then
          echo "::error::Function coverage (${{ steps.test-coverage.outputs.functions }}%) is below threshold ($THRESHOLD%)"
          exit 1
        fi
        
        if (( $(echo "${{ steps.test-coverage.outputs.lines }} < $THRESHOLD" | bc -l) )); then
          echo "::error::Line coverage (${{ steps.test-coverage.outputs.lines }}%) is below threshold ($THRESHOLD%)"
          exit 1
        fi
        
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          coverage/
          test-output.txt