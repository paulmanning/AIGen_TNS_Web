name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.19.1'
        cache: 'npm'
        
    - name: Set npm version
      run: |
        npm install -g npm@10.2.4
        npm --version
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y bc
        npm ci --legacy-peer-deps
        npm install -g vitest@$(node -p "require('./package.json').devDependencies.vitest")
      
    - name: Create env file
      run: |
        touch .env.local
        echo "NEXT_PUBLIC_MAPBOX_TOKEN=dummy_token_for_tests" >> .env.local
      
    - name: Run tests with coverage
      id: test-coverage
      run: |
        # Run tests and save output
        echo "Running tests with coverage..."
        set -o pipefail  # Ensure pipeline exit status is the status of the last failing command
        npm run test -- --coverage --environment jsdom --reporter verbose --coverage.reporter=text --coverage.reporter=json --coverage.reporter=lcov 2>&1 | tee test-output.txt
        TEST_EXIT_CODE=$?
        
        # Debug: Show the test output
        echo "=== Test Output ==="
        cat test-output.txt
        echo "=== End Test Output ==="
        
        # Debug: Show coverage section
        echo "=== Coverage Section ==="
        grep -A 10 "% Coverage report from v8" test-output.txt || true
        echo "=== End Coverage Section ==="
        
        # Extract coverage metrics using more specific patterns
        STATEMENTS=$(grep -A 10 "% Coverage report from v8" test-output.txt | grep "All files" | awk '{print $3}' | tr -d '%' || echo "0")
        BRANCHES=$(grep -A 10 "% Coverage report from v8" test-output.txt | grep "All files" | awk '{print $4}' | tr -d '%' || echo "0")
        FUNCTIONS=$(grep -A 10 "% Coverage report from v8" test-output.txt | grep "All files" | awk '{print $5}' | tr -d '%' || echo "0")
        LINES=$(grep -A 10 "% Coverage report from v8" test-output.txt | grep "All files" | awk '{print $6}' | tr -d '%' || echo "0")
        
        # Debug output
        echo "=== Extracted Metrics ==="
        echo "Statements: $STATEMENTS"
        echo "Branches: $BRANCHES"
        echo "Functions: $FUNCTIONS"
        echo "Lines: $LINES"
        echo "=== End Extracted Metrics ==="
        
        # Save metrics as step outputs
        echo "statements=$STATEMENTS" >> $GITHUB_OUTPUT
        echo "branches=$BRANCHES" >> $GITHUB_OUTPUT
        echo "functions=$FUNCTIONS" >> $GITHUB_OUTPUT
        echo "lines=$LINES" >> $GITHUB_OUTPUT
        
        # Check for test failures
        if [ $TEST_EXIT_CODE -ne 0 ]; then
          echo "::error::Tests failed with exit code $TEST_EXIT_CODE. See output above for details."
          exit 1
        fi
      env:
        NODE_ENV: test
        NEXT_PUBLIC_MAPBOX_TOKEN: dummy_token_for_tests
        CI: true
        DEBUG: 'true'
        LANG: en_US.UTF-8
        LANGUAGE: en_US:en
        LC_ALL: en_US.UTF-8
      shell: bash  # Explicitly use bash for pipefail support
      
    - name: Upload coverage reports to Codecov
      if: always()
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info,./coverage/coverage-final.json
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Check coverage thresholds
      if: success()
      run: |
        echo "Coverage metrics from test run:"
        echo "Statements: ${{ steps.test-coverage.outputs.statements }}%"
        echo "Branches: ${{ steps.test-coverage.outputs.branches }}%"
        echo "Functions: ${{ steps.test-coverage.outputs.functions }}%"
        echo "Lines: ${{ steps.test-coverage.outputs.lines }}%"
        
        THRESHOLD=40
        
        # Use bc for floating point comparison
        if (( $(echo "${{ steps.test-coverage.outputs.statements }} < $THRESHOLD" | bc -l) )); then
          echo "::error::Statement coverage (${{ steps.test-coverage.outputs.statements }}%) is below threshold ($THRESHOLD%)"
          exit 1
        fi
        
        if (( $(echo "${{ steps.test-coverage.outputs.branches }} < $THRESHOLD" | bc -l) )); then
          echo "::error::Branch coverage (${{ steps.test-coverage.outputs.branches }}%) is below threshold ($THRESHOLD%)"
          exit 1
        fi
        
        if (( $(echo "${{ steps.test-coverage.outputs.functions }} < $THRESHOLD" | bc -l) )); then
          echo "::error::Function coverage (${{ steps.test-coverage.outputs.functions }}%) is below threshold ($THRESHOLD%)"
          exit 1
        fi
        
        if (( $(echo "${{ steps.test-coverage.outputs.lines }} < $THRESHOLD" | bc -l) )); then
          echo "::error::Line coverage (${{ steps.test-coverage.outputs.lines }}%) is below threshold ($THRESHOLD%)"
          exit 1
        fi
        
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          coverage/
          test-output.txt