name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.19.1'
        cache: 'npm'
        
    - name: Set npm version
      run: |
        npm install -g npm@10.2.4
        npm --version
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y bc
        npm ci --legacy-peer-deps
        npm install -g vitest@$(node -p "require('./package.json').devDependencies.vitest")
      
    - name: Create env file
      run: |
        touch .env.local
        echo "NEXT_PUBLIC_MAPBOX_TOKEN=dummy_token_for_tests" >> .env.local
      
    - name: Run tests with coverage
      id: test-coverage
      run: |
        # Run tests and save output
        echo "Running tests with coverage..."
        npm run test -- --coverage --environment jsdom --reporter verbose | tee test-output.txt
        
        # Extract coverage metrics
        echo "=== Coverage Report ==="
        cat test-output.txt
        echo "=== End Coverage Report ==="
        
        # Extract metrics using grep and awk
        COVERAGE_LINE=$(grep "All files" test-output.txt | tail -n1)
        echo "Coverage line: $COVERAGE_LINE"
        
        # Parse metrics using awk with | as field separator
        STATEMENTS=$(echo "$COVERAGE_LINE" | awk -F'|' '{gsub(/^[ \t]+|[ \t]+$/, "", $2); print $2}')
        BRANCHES=$(echo "$COVERAGE_LINE" | awk -F'|' '{gsub(/^[ \t]+|[ \t]+$/, "", $3); print $3}')
        FUNCTIONS=$(echo "$COVERAGE_LINE" | awk -F'|' '{gsub(/^[ \t]+|[ \t]+$/, "", $4); print $4}')
        LINES=$(echo "$COVERAGE_LINE" | awk -F'|' '{gsub(/^[ \t]+|[ \t]+$/, "", $5); print $5}')
        
        # Remove % signs
        STATEMENTS=$(echo "$STATEMENTS" | tr -d '%')
        BRANCHES=$(echo "$BRANCHES" | tr -d '%')
        FUNCTIONS=$(echo "$FUNCTIONS" | tr -d '%')
        LINES=$(echo "$LINES" | tr -d '%')
        
        # Debug output
        echo "Extracted metrics:"
        echo "Statements: $STATEMENTS%"
        echo "Branches: $BRANCHES%"
        echo "Functions: $FUNCTIONS%"
        echo "Lines: $LINES%"
        
        # Save metrics as outputs
        echo "statements=$STATEMENTS" >> $GITHUB_OUTPUT
        echo "branches=$BRANCHES" >> $GITHUB_OUTPUT
        echo "functions=$FUNCTIONS" >> $GITHUB_OUTPUT
        echo "lines=$LINES" >> $GITHUB_OUTPUT
      env:
        NODE_ENV: test
        NEXT_PUBLIC_MAPBOX_TOKEN: dummy_token_for_tests
        CI: true
        DEBUG: 'true'
        LANG: en_US.UTF-8
        LANGUAGE: en_US:en
        LC_ALL: en_US.UTF-8
      
    - name: Upload coverage reports to Codecov
      if: always()
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info,./coverage/coverage-final.json
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Check coverage thresholds
      if: success()
      run: |
        echo "Coverage metrics from test run:"
        echo "Statements: ${{ steps.test-coverage.outputs.statements }}%"
        echo "Branches: ${{ steps.test-coverage.outputs.branches }}%"
        echo "Functions: ${{ steps.test-coverage.outputs.functions }}%"
        echo "Lines: ${{ steps.test-coverage.outputs.lines }}%"
        
        THRESHOLD=40
        
        # Use bc for floating point comparison
        if (( $(echo "${{ steps.test-coverage.outputs.statements }} < $THRESHOLD" | bc -l) )); then
          echo "::error::Statement coverage (${{ steps.test-coverage.outputs.statements }}%) is below threshold ($THRESHOLD%)"
          exit 1
        fi
        
        if (( $(echo "${{ steps.test-coverage.outputs.branches }} < $THRESHOLD" | bc -l) )); then
          echo "::error::Branch coverage (${{ steps.test-coverage.outputs.branches }}%) is below threshold ($THRESHOLD%)"
          exit 1
        fi
        
        if (( $(echo "${{ steps.test-coverage.outputs.functions }} < $THRESHOLD" | bc -l) )); then
          echo "::error::Function coverage (${{ steps.test-coverage.outputs.functions }}%) is below threshold ($THRESHOLD%)"
          exit 1
        fi
        
        if (( $(echo "${{ steps.test-coverage.outputs.lines }} < $THRESHOLD" | bc -l) )); then
          echo "::error::Line coverage (${{ steps.test-coverage.outputs.lines }}%) is below threshold ($THRESHOLD%)"
          exit 1
        fi
        
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          coverage/
          test-output.txt